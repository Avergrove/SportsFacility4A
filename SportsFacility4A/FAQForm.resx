<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Frequently Asked Questions

* How to create a new Customer?

1. Click on the Customer Menu item under Maintenance.

2. Enter all the details in the customer maintenance form.

3. Click Create button to create a new Customer.



* How to search or update existing Customer?

Update the Customer:

1. Click on the Customer Menu item under Maintenance.

2. Get the details of the customer.

3. Change the details that you need to update and click on update button.

Search the Customer:

1. For searching click on the button beside the customer id. This loads a page of Customers.

2. Select the customer that you want to and click on ok button.

3. To get the details of the particular customer.

* How to view facilities availability?

1. Click on Maintenance from the menu bar

2. Click on "Booking" then "Create" from the menu dropdown lists

3. Select Facility and Venue from the dropdown boxes to view the availability of the facilities.



*How to create new/update facilities

Create Facilites:

1. Click on "Maintenance" from the menu bar

2. Select "Venue" from the menu dropdown list

3. Leave the Venue ID blank

4. Key in the new venue information

5. Click on "Create" button

Update Facilities:

1. Click on "Maintenance" from the menu bar

2. Select "Venue" from the menu dropdown list

3. Key in the Venue ID and click enter or click on the […] button and select the venue from the table.

4. Information will be auto populated onto the screen.

5. Edit the information and click on the "Update" Button



* How to make new facilities booking?

1. Click on "Maintenance" from the menu

2. Select "Booking" from the menu dropdown list followed by "Create"

3. Select Facility from Facility dropdown box

4. Select Venue from Venue dropdown box

5. Key in Customer ID

6. Click on "Make a booking" button

* How to manage/edit facilities booking?

For cancellations:

1. Select Maintenance from the menu

2. Select "Booking" from the menu dropdown list followed by "Manage"

3. On the form, select the booking's facility from the 'Facility' dropdown box

4. Select the Venue from the Venue dropdown box

5. Select the Booked Hour from the Timeslot dropdown box. Customer's name will appear once selected

6. Press "Cancel Booking" button

If successful, status bar will show the following message: "Update completed...".

Alternatively, you can click on the […] button beside the Facility dropdown box to view all confirmed bookings and select a booking from there.

For editing of existing bookings:

1. Select Maintenance from the menu

2. Click on "Booking" followed by "Manage" from the menu dropdown list.

3. On the form, click on the […] button beside the Facility drop down box

4. Click on the booking that you would like to edit from the grid

5. After selecting the booking, click on the "Update" button

6. Choose the timing you would to change to or select other facilities from the dropdown menu and select the available slots that you would like to update to

7. Click on the "OK" button to submit changes.

Note: Bookings can only be updated to timeslots that are "available". Otherwise, "OK" button will not be clickable.



*Generate Reports:

1. Select report on the menu bar

2. Select the required report to be generated



*About Reports:

1) Customer List Report: It contains the information of all members

2) Booking Transactions Report: It summarises confirmed bookings of various facilities and booked hour.

3) Demograhpic Member Chart: It illustrates demographic distribution of members.</value>
  </data>
</root>